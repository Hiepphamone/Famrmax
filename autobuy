repeat wait() until game:IsLoaded() and game.ReplicatedStorage and game.ReplicatedStorage:FindFirstChild("MultiboxFramework")
repeat wait() until require(game:GetService("ReplicatedStorage").MultiboxFramework).Loaded

getgenv().hopServer = true -- Bật/tắt hop server
getgenv().hopDelay = 500 -- Thời gian delay giữa các lần hop server (giây)

local dataunit = require(game:GetService("ReplicatedStorage").MultiboxFramework).Inventory.GetAllCopies({ "Troops", "Crates" })
local plr = game.Players.LocalPlayer
local save = require(game:GetService("ReplicatedStorage"):WaitForChild("MultiboxFramework"))
local Inventory = save.Inventory

if game.PlaceId == 13775256536 then
    game:GetService("TeleportService"):Teleport(14682939953)
else
    local save = require(game:GetService("ReplicatedStorage"):WaitForChild("MultiboxFramework"))
    local data = save.Inventory
    local datamarket = save:WaitForModule("Replicate"):WaitForReplica("Marketplace_Listings")
    local getdatamarket = datamarket:GetData()
    local l_Inventory_0 = save.Inventory

    local function addCommas(v212)
        local v213 = tostring(v212)
        repeat
            local v215, v216 = string.gsub(v213, "^(-?%d+)(%d%d%d)", "%1,%2")
            v213 = v215
        until v216 == 0
        return v213
    end

    local PlaceID = game.PlaceId
    local AllIDs = {}
    local foundAnything = ""
    local actualHour = os.date("!*t").hour
    local File = pcall(function()
        AllIDs = game:GetService('HttpService'):JSONDecode(readfile("NotSameServers.json"))
    end)
    if not File then
        table.insert(AllIDs, actualHour)
        writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
    end

    local function TPReturner()
        if not getgenv().hopServer then return end -- Bỏ qua nếu hop server bị tắt
        local Site
        if foundAnything == "" then
            Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. game.PlaceId .. '/servers/0?sortOrder=5&excludeFullGames=true&limit=100'))
        end
        local ID = ""
        if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
            foundAnything = Site.nextPageCursor
        end
        for i, v in pairs(Site.data) do
            local Possible = true
            ID = tostring(v.id)
            if tonumber(v.maxPlayers) > tonumber(v.playing) then
                for _, Existing in pairs(AllIDs) do
                    if ID == tostring(Existing) then
                        Possible = false
                        break
                    end
                end
                if Possible then
                    table.insert(AllIDs, ID)
                    writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                    wait()
                    pcall(function()
                        game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
                    end)
                    wait(4)
                end
            end
        end
    end

    local function Teleport()
        if not getgenv().hopServer then return end -- Bỏ qua nếu hop server bị tắt
        pcall(function()
            TPReturner()
            if foundAnything ~= "" then
                TPReturner()
            end
        end)
        task.wait(getgenv().hopDelay) -- Thêm thời gian delay giữa các lần hop server
    end

    while wait() do
        if not game:GetService("Players").LocalPlayer.PlayerGui.Lobby.MarketplaceFrame.Visible then
            plr.Character.HumanoidRootPart.CFrame = CFrame.new(1438, 113, 2545)
            task.wait(1)
            plr.Character.HumanoidRootPart.CFrame = CFrame.new(1438, 113, 2558)
            task.wait(1)
        end

        for i, v in next, getdatamarket do
            for i1, v1 in next, getgenv().data do
                local v60 = l_Inventory_0.GetItemConfig(v.Category, v.ItemId)
                if string.find(v60.DisplayName, i1) and v.GemPrice <= v1.GemBuy then
                    local saved = game:GetService("ReplicatedStorage").IdentifiersContainer.RF_f738402c005be62deb6d6f2d01260f9f19bf5592274bb4967eed55702a193d21_S.Value
                    game:GetService("ReplicatedStorage"):WaitForChild("NetworkingContainer"):WaitForChild("DataRemote")
                        :FireServer({ { saved, "Honglamx", v.UID, v.GemPrice } })
                    wait(1)
                    print(v.GemPrice, v.Seller, v.UID, v.Rarity, v60.DisplayName, v.ItemId)
                    wait(1)
                end
            end
        end
        Teleport()
    end
end
